version: '3'

services:

  #################################################
  ############### Proxy (Optional) ################
  #################################################

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx:/etc/nginx/conf.d
    networks:
      dsi_custom_bridge:
        ipv4_address: 172.20.0.2
    restart: unless-stopped

  #################################################
  ################## Monitoring ###################
  #################################################
  
  grafana:
    image: grafana/grafana:latest
    container_name: dsi_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: postgres
      GF_SECURITY_ADMIN_PASSWORD: postgres
      GF_PROVISIONING_PATH: /etc/grafana/provisioning
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: dsi_postgres:5432
      GF_DATABASE_USER: postgres
      GF_DATABASE_PASSWORD: postgres
      GF_DATABASE_NAME: grafana
    networks:
      dsi_custom_bridge:
        ipv4_address: 172.20.0.3
    volumes:
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    depends_on:
      - postgres

  prometheus:
    image: prom/prometheus:latest
    container_name: dsi_prometheus
    networks:
      dsi_custom_bridge:
        ipv4_address: 172.20.0.4
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped

  exporter_node:
    image: prom/node-exporter
    container_name: dsi_exporter_node
    pid: "host"
    networks:
      dsi_custom_bridge:
        ipv4_address: 172.20.0.5
    volumes:
      - "/:/host:ro,rslave"
    command:
      - '--path.rootfs=/host'

  exporter_postgres:
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: dsi_exporter_postgres
    networks:
      dsi_custom_bridge:
        ipv4_address: 172.20.0.10
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@dsi_postgres:5432/?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    restart: unless-stopped

  # exporter_jmx:
  #   image: bitnami/jmx-exporter:latest
  #   container_name: dsi_exporter_jmx
  #   networks:
  #     dsi_custom_bridge:
  #       ipv4_address: 172.20.0.7
  #   ports:
  #     - "5556:5556"
  #   volumes:
  #     - ./jmx-exporter/jmx-exporter-config.yaml:/opt/bitnami/jmx-exporter/jmx-exporter-config.yaml
  #     - ./jmx-exporter/logging.properties:/opt/bitnami/jmx-exporter/logging.properties
  #   environment:
  #     JMX_EXPORTER_CONFIG: /opt/bitnami/jmx-exporter/jmx-exporter-config.yaml
  #   restart: unless-stopped

  # exporter_jmx:
  #   image: local/jmx-exporter:1.11
  #   container_name: exporter_jmx
  #   networks:
  #     dsi_custom_bridge:
  #       ipv4_address: 172.20.0.7
  #   ports:
  #     - "5556:5556"
  #   command: >
  #     /bin/sh -c "
  #     echo 'Contents of JMX Exporter Configuration File:';
  #     cat /config/jmx-exporter-config.yaml;
  #     echo 'Starting JMX Exporter...';
  #     java -Djava.util.logging.config.file=/config/logging.properties -jar /jmx_prometheus_httpserver.jar '5556' /config/jmx-exporter-config.yaml;
  #     "
  #   environment:
  #     - JMX_URL=service:jmx:rmi:///jndi/rmi://kafka1:9099/jmxrmi
  #   restart: unless-stopped
  
  #################################################
  ##################### Kafka #####################
  #################################################

  kafka_00:
    image: confluentinc/cp-kafka:latest
    container_name: dsi_kafka_00
    networks:
      dsi_custom_bridge:
        ipv4_address: 172.20.0.6
    ports:
      - "9092:9092"
      - "9093:9093"
      - "9099:9099"
    volumes:
      - dsi-kafka-data:/var/lib/kafka/data
    environment:
      # Node settings
      KAFKA_BROKER_ID: 0
      KAFKA_NODE_ID: 0
      # Listeneres
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_LISTENERS: "CONTROLLER://dsi_kafka_00:9093,INTERNAL://dsi_kafka_00:9094,LOCALHOST://172.20.0.6:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://dsi_kafka_00:9094,LOCALHOST://172.20.0.6:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,LOCALHOST:PLAINTEXT"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "0@dsi_kafka_00:9093"
      KAFKA_ENABLE_KRAFT: "true"
      # Topics
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 1
      # Metrics
      KAFKA_JMX_PORT: "9099"
      KAFKA_JMX_HOSTNAME: "dsi_kafka_00"
      KAFKA_JMX_OPTS: "-Djava.rmi.server.hostname=dsi_kafka_00 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.rmi.port=9099"
      # Rest
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_HEAP_OPTS: "-Xmx2g -Xms2g"
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
      CLUSTER_ID: n3KIrTWZSgCBNF1UZqvI8Q
    restart: unless-stopped

  # kafka-connect:
  #   build: kafka_connect/.
  #   container_name: dsi_kafka_connect
  #   depends_on:
  #     - kafka_00 
  #   networks:
  #     - dsi_custom_bridge
  #   ports:
  #     - "8083:8083" 
  #   environment:
  #     GROUP_ID: 1
  #     CONNECT_CONFIG_STORAGE_TOPIC: "connect-configs"
  #     CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
  #     CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
  #     CONFIG_STORAGE_REPLICATION_FACTOR: 1
  #     OFFSET_STORAGE_REPLICATION_FACTOR: 1
  #     STATUS_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_BOOTSTRAP_SERVERS: "dsi_kafka_00:9094"
  #     CONNECT_REST_ADVERTISED_HOST_NAME: "kafka_connect"
  #     CONNECT_REST_PORT: 8083
  #     CONNECT_PLUGIN_PATH: "/usr/share/java"
  #     CONNECT_GROUP_ID: n3KIrTWZSgCBNF1UZqvI8Q
  #     CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
  #     CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
  #     KAFKA_HEAP_OPTS: "-Xms256m -Xmx512m"

  # kafka_consumer:
  #   build: 'node/.'
  #   container_name: dsi_kafka_consumer
  #   networks:
  #     dsi_custom_bridge:
  #       ipv4_address: 172.20.0.11
  #   command: /bin/sh -c "sleep 30 && node index.js"
  #   environment:
  #     MODE: 'consumer'
  #     KAFKA_HOST: 'dsi_kafka_00:9094'
  #   restart: unless-stopped
  #   depends_on:
  #     - kafka_00
  #     - kafka_producer_uber

  # kafka_producer_uber:
  #   build: 'node/.'
  #   container_name: dsi_kafka_producer_uber
  #   networks:
  #     dsi_custom_bridge:
  #       ipv4_address: 172.20.0.12
  #   command: /bin/sh -c "sleep 30 && node index.js"
  #   environment:
  #     MODE: 'producer'
  #     KAFKA_HOST: 'dsi_kafka_00:9094'
  #     STOCK: 'UBER'
  #     DEV: 'true'
  #   restart: unless-stopped
  #   depends_on:
  #     - kafka_00

  # kafka_producer_nflx:
  #   build: 'node/.'
  #   container_name: dsi_kafka_producer_nflx
  #   networks:
  #     dsi_custom_bridge:
  #       ipv4_address: 172.20.0.13
  #   command: /bin/sh -c "sleep 30 && node index.js"
  #   environment:
  #     MODE: 'producer'
  #     KAFKA_HOST: 'dsi_kafka_00:9094'
  #     STOCK: 'NFLX'
  #     # DEV: true
  #   restart: unless-stopped
  #   depends_on:
  #     - kafka_00

  #################################################
  ################## Processing ###################
  #################################################
  
  jupyter-spark:
    build: spark/.
    container_name: dsi_spark
    networks:
      dsi_custom_bridge:
        ipv4_address: 172.20.0.14
    ports:
      - "8888:8888"
      - "4040:4040"
    volumes:
      - ./spark:/home/jovyan/work
    environment:
      - JUPYTER_ENABLE_LAB=yes
    restart: unless-stopped

  #################################################
  ################### Database ####################
  #################################################

  postgres:
    image: postgres:latest
    container_name: dsi_postgres
    networks:
      dsi_custom_bridge:
        ipv4_address: 172.20.0.8
    ports:
      - "5432:5432"
    volumes:
      - dsi-postgres-data:/var/lib/postgresql/data
      - ./postgres:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    restart: unless-stopped

  # mongo:
  #   image: mongo:latest
  #   container_name: dsi_mongo
  #   networks:
  #     dsi_custom_bridge:
  #       ipv4_address: 172.20.0.9
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - dsi-mongo-data:/data/db
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: postgres
  #     MONGO_INITDB_ROOT_PASSWORD: postgres
  #   restart: unless-stopped

volumes:
  dsi-kafka-data:
  dsi-postgres-data:
  # dsi-mongo-data:

networks:
  dsi_custom_bridge:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
